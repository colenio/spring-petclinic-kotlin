name: Build and publish Docker image of Petclinic Kotlin Spring App

on:
#   push:
#     branches: ["main"]
#   pull_request:
#     branches: ["main"]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# GITHUB_TOKEN needs 'packages: write' to push to ghcr
permissions:
  contents: read
  packages: write

env:
  # Passe den Image-Namen an (Owner / Image). Z. B. ghcr.io/<OWNER>/my-kotlin-app
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/petclinic-kotlin-spring
  JAVA_VERSION: '17'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: adopt
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: Cache Gradle directories
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle (create jar)
        run: ./gradlew clean build --no-daemon
        # Falls du Tests separat laufen lassen m√∂chtest, entferne --no-daemon nicht oder passe the Task an.

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

      - name: Verify pushed image
        env:
          IMAGE_LATEST: ${{ env.IMAGE_NAME }}:latest
          IMAGE_SHA: ${{ env.IMAGE_NAME }}:${{ github.sha }}
        run: |
          echo "Verify IMAGE_LATEST=$IMAGE_LATEST"
          # Pull the image we just pushed (will use the ghcr.io login from previous step)
          docker pull "$IMAGE_SHA" || docker pull "$IMAGE_LATEST"
          # Run java -version inside the image to confirm runtime works
          docker run --rm "$IMAGE_SHA" java -version || docker run --rm "$IMAGE_LATEST" java -version
