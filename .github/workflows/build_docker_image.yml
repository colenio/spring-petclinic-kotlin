name: Build and publish Docker image of Petclinic Kotlin Spring App

on:
#   push:
#     branches: ["main"]
#   pull_request:
#     branches: ["main"]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# GITHUB_TOKEN needs 'packages: write' to push to ghcr
permissions:
  contents: read
  packages: write

env:
  # Passe den Image-Namen an (Owner / Image). Z. B. ghcr.io/<OWNER>/my-kotlin-app
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/petclinic-kotlin-spring
  JAVA_VERSION: '17'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: adopt
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: Cache Gradle directories
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle (create jar)
        run: ./gradlew clean build --no-daemon
        # Falls du Tests separat laufen lassen mÃ¶chtest, entferne --no-daemon nicht oder passe the Task an.

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

      - name: Verify pushed image
        env:
          IMAGE_SHA: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          IMAGE_LATEST: ${{ env.IMAGE_NAME }}:latest
        run: |
          echo "Try pull $IMAGE_SHA (fallback to latest)"
          for i in 1 2 3; do
            if docker pull "$IMAGE_SHA"; then break; fi
            echo "Pull $IMAGE_SHA failed, retrying..."
            sleep 5
          done
          # If SHA not available, fallback to latest
          if ! docker image inspect "$IMAGE_SHA" >/dev/null 2>&1; then
            echo "SHA tag not present, pulling latest"
            docker pull "$IMAGE_LATEST"
            IMAGE_TO_CHECK="$IMAGE_LATEST"
          else
            IMAGE_TO_CHECK="$IMAGE_SHA"
          fi
          echo "Inspect image manifest (optional)"
          if docker buildx version >/dev/null 2>&1; then
            docker buildx imagetools inspect "$IMAGE_TO_CHECK" || true
          fi
          echo "Run java -version inside image (override ENTRYPOINT)"
          docker run --rm --entrypoint java "$IMAGE_TO_CHECK" -version
